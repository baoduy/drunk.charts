suites:
- name: Deployment Template Test Suite
templates:
- deployment.yaml
tests:
- it: should not create a Deployment when deploymentEnabled is false
  set:
    global: {}
    deployment:
      enabled: false
  asserts:
  - hasDocuments:
      count: 0

- it: should create a Deployment with default values
  set:
    deployment:
      enabled: true
      replicaCount: 1
      ports:
        http: 8080
    app:
      fullname: test-deployment
      name: test-app
      labels:
        app: test-app
    global:
      image: nginx
      tag: latest
    podSecurityContext: {}
    securityContext: {}
    resources: {}
  asserts:
  - hasDocuments:
      count: 1
  - isKind:
      of: Deployment
  - equal:
      path: metadata.name
      value: "RELEASE-NAME-drunk-app"
  - isSubset:
      path: metadata.labels
      content:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: drunk-app
        app.kubernetes.io/version: latest
        #helm.sh/chart: drunk-app-1.0.4

  - equal:
      path: spec.replicas
      value: 1
  - equal:
      path: spec.template.spec.containers[0].image
      value: "nginx:latest"
  - equal:
      path: spec.template.spec.containers[0].ports[0].containerPort
      value: 8080
  - equal:
      path: spec.template.spec.automountServiceAccountToken
      value: false

- it: should respect custom replicaCount, imagePullSecret, and probes
  set:
    deployment:
      enabled: true
      replicaCount: 3
      ports:
        http: 9090
      liveness: "/health"
      readiness: "/ready"
    global:
      imagePullSecret: my-secret
      image: custom-image
      tag: "1.2.3"
      imagePullPolicy: IfNotPresent
    podSecurityContext:
      runAsUser: 1000
    securityContext:
      allowPrivilegeEscalation: false
  asserts:
  - equal:
      path: spec.replicas
      value: 3
  - equal:
      path: spec.template.spec.imagePullSecrets[0].name
      value: "my-secret"
  - equal:
      path: spec.template.spec.containers[0].livenessProbe.httpGet.path
      value: "/health"
  - equal:
      path: spec.template.spec.containers[0].readinessProbe.httpGet.path
      value: "/ready"
  - equal:
      path: spec.template.spec.securityContext.runAsUser
      value: 1000
  - equal:
      path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
      value: false

- it: should have an init container
  set:
    deployment:
      enabled: true
    global:
      initContainer:
        image: "init-image-name:tag"
        command: "echo Init complete;"
  asserts:
  - isNotEmpty:
      path: spec.template.spec.initContainers
  - equal:
      path: spec.template.spec.initContainers[0].image
      value: "init-image-name:tag"

- it: should use default RollingUpdate strategy when strategy is not provided
  set:
    deployment:
      enabled: true
    global:
      image: nginx
      tag: latest
  asserts:
  - equal:
      path: spec.strategy.type
      value: "RollingUpdate"
  - equal:
      path: spec.strategy.rollingUpdate.maxSurge
      value: 1
  - equal:
      path: spec.strategy.rollingUpdate.maxUnavailable
      value: 0

- it: should use custom strategy configuration when provided
  set:
    deployment:
      enabled: true
      strategy:
        type: "Recreate"
    global:
      image: nginx
      tag: latest
  asserts:
  - equal:
      path: spec.strategy.type
      value: "Recreate"
  - isNull:
      path: spec.strategy.rollingUpdate

- it: should use custom rollingUpdate parameters when provided
  set:
    deployment:
      enabled: true
      strategy:
        type: "RollingUpdate"
        maxSurge: 2
        maxUnavailable: 1
    global:
      image: nginx
      tag: latest
  asserts:
  - equal:
      path: spec.strategy.type
      value: "RollingUpdate"
  - equal:
      path: spec.strategy.rollingUpdate.maxSurge
      value: 2
  - equal:
      path: spec.strategy.rollingUpdate.maxUnavailable
      value: 1

- it: should use default RollingUpdate strategy with custom maxSurge when only maxSurge is provided
  set:
    deployment:
      enabled: true
      strategy:
        maxSurge: 3
    global:
      image: nginx
      tag: latest
  asserts:
  - equal:
      path: spec.strategy.type
      value: "RollingUpdate"
  - equal:
      path: spec.strategy.rollingUpdate.maxSurge
      value: 3
  - equal:
      path: spec.strategy.rollingUpdate.maxUnavailable
      value: 0

- it: should use default RollingUpdate strategy with custom maxUnavailable when only maxUnavailable is provided
  set:
    deployment:
      enabled: true
      strategy:
        maxUnavailable: 2
    global:
      image: nginx
      tag: latest
  asserts:
  - equal:
      path: spec.strategy.type
      value: "RollingUpdate"
  - equal:
      path: spec.strategy.rollingUpdate.maxSurge
      value: 1
  - equal:
      path: spec.strategy.rollingUpdate.maxUnavailable
      value: 2

- it: should use Recreate strategy when explicitly set
  set:
    deployment:
      enabled: true
      strategy:
        type: "Recreate"
    global:
      image: nginx
      tag: latest
  asserts:
  - equal:
      path: spec.strategy.type
      value: "Recreate"
  - isNull:
      path: spec.strategy.rollingUpdate

- it: should ignore rollingUpdate parameters when strategy is Recreate
  set:
    deployment:
      enabled: true
      strategy:
        type: "Recreate"
        maxSurge: 5
        maxUnavailable: 3
    global:
      image: nginx
      tag: latest
  asserts:
  - equal:
      path: spec.strategy.type
      value: "Recreate"
  - isNull:
      path: spec.strategy.rollingUpdate

