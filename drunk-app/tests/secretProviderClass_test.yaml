suite: SecretProviderClass Template Test Suite
templates:
  - secretProviderClass.yaml

tests:
  - it: should not create a SecretProviderClass when secretProvider is not set
    set: {}
    asserts:
      - hasDocuments:
          count: 0

  - it: should not create a SecretProviderClass when disabled
    set:
      secretProvider:
        enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should create with defaults (provider azure, default name, default identity flags)
    set:
      secretProvider:
        enabled: true
        provider:
          tenantId: t1
          vaultName: v1
        objects: []
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: SecretProviderClass
      - equal:
          path: metadata.name
          value: "drunk-app-spc-cls"
      - equal:
          path: spec.provider
          value: azure
      - equal:
          path: spec.parameters.tenantId
          value: "t1"
      - equal:
          path: spec.parameters.keyvaultName
          value: "v1"
      - equal:
          path: spec.parameters.usePodIdentity
          value: "false"
      - equal:
          path: spec.parameters.useWorkloadIdentity
          value: "false"
      - matchRegex:
          path: spec.parameters.objects
          pattern: "(?s)array:\\n\\s*$"

  - it: should render with custom name, provider, objects and secretObjects
    set:
      secretProvider:
        enabled: true
        provider:
          name: aws
          tenantId: your-tenant-id
          vaultName: your-vault-name
          usePodIdentity: false
          useWorkloadIdentity: true
        name: my-secret-class
        objects:
          - objectName: my-secret-1
            objectType: secret
            objectVersion: ""
          - objectName: my-secret-2
            objectType: secret
            objectVersion: ""
        secretObjects:
          - secretName: my-secret-class
            type: Opaque
            data:
              - key: secret-1
                objectName: my-secret-1
              - key: secret-2
                objectName: my-secret-2
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: SecretProviderClass
      - equal:
          path: metadata.name
          value: "my-secret-class-cls"
      - equal:
          path: spec.provider
          value: aws
      - equal:
          path: spec.parameters.usePodIdentity
          value: "false"
      - equal:
          path: spec.parameters.useWorkloadIdentity
          value: "true"
      - matchRegex:
          path: spec.parameters.objects
          pattern: "(?s)objectName:\\s+my-secret-1\\n\\s*objectType:\\s+secret"
      - matchRegex:
          path: spec.parameters.objects
          pattern: "(?s)objectName:\\s+my-secret-2\\n\\s*objectType:\\s+secret"
      - equal:
          path: spec.secretObjects[0].type
          value: Opaque
      - equal:
          path: spec.secretObjects[0].secretName
          value: my-secret-class

  - it: should default secretName to <app.name>-spc when secretProvider.name is not set
    set:
      secretProvider:
        enabled: true
        provider:
          tenantId: t1
          vaultName: v1
        objects:
          - objectName: foo
            objectType: secret
        secretObjects:
          - secretName: ''
            data:
              - key: FOO
                objectName: foo
    asserts:
      - equal:
          path: spec.secretObjects[0].secretName
          value: drunk-app-spc

  - it: should honor identity flags (usePodIdentity true, useWorkloadIdentity false)
    set:
      secretProvider:
        enabled: true
        provider:
          tenantId: t1
          vaultName: v1
          usePodIdentity: true
          useWorkloadIdentity: false
        objects:
          - objectName: foo
            objectType: secret
    asserts:
      - equal:
          path: spec.parameters.usePodIdentity
          value: "true"
      - equal:
          path: spec.parameters.useWorkloadIdentity
          value: "false"

  - it: should include objectVersion when provided
    set:
      secretProvider:
        enabled: true
        provider:
          tenantId: t1
          vaultName: v1
        objects:
          - objectName: bar
            objectType: secret
            objectVersion: "123"
    asserts:
      - matchRegex:
          path: spec.parameters.objects
          pattern: "(?s)objectVersion:\\s+\"123\""

  - it: should include common labels and selector labels
    set:
      secretProvider:
        enabled: true
        provider:
          tenantId: t1
          vaultName: v1
        objects: []
    asserts:
      - equal:
          path: metadata.labels['app.kubernetes.io/name']
          value: drunk-app
      - equal:
          path: metadata.labels['app.kubernetes.io/instance']
          value: RELEASE-NAME

  - it: should set useVMManagedIdentity and userAssignedIdentityID when provided
    set:
      secretProvider:
        enabled: true
        provider:
          tenantId: t1
          vaultName: v1
          useVMManagedIdentity: false
          userAssignedIdentityID: my-identity-id
        objects: []
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.parameters.userAssignedIdentityID
          value: "my-identity-id"
      # Checking that the parameter exists, but not enforcing a specific value
      - isNotEmpty:
          path: spec.parameters.useVMManagedIdentity

  - it: should auto-generate secretObjects from objects if secretObjects is not set
    set:
      secretProvider:
        enabled: true
        provider:
          tenantId: t1
          vaultName: v1
        objects:
          - objectName: foo
            objectType: secret
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.secretObjects[0].secretName
          value: drunk-app-spc
