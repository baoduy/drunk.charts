suites: Service Template Test Suite
templates:
- service.yaml
tests:
- it: should create a Service with default values
  set:
    app:
      fullname: test-service
      labels:
        app: RELEASE-NAME-drunk-app
    deployment:
      ports:
        http: 80
    service:
      enabled: true
      type: ClusterIP
  asserts:
  - hasDocuments:
      count: 1
  - isKind:
      of: Service
  - equal:
      path: metadata.name
      value: "RELEASE-NAME-drunk-app"
  - isSubset:
      path: metadata.labels
      content:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: drunk-app
        app.kubernetes.io/version: latest
        #helm.sh/chart: drunk-app-1.0.4

  - equal:
      path: spec.type
      value: "ClusterIP"
  - equal:
      path: spec.ports[0].port
      value: 80
  - equal:
      path: spec.ports[0].targetPort
      value: http
  - equal:
      path: spec.ports[0].protocol
      value: TCP
  - isSubset:
      path: spec.selector
      content:
        app.kubernetes.io/instance: RELEASE-NAME
        app.kubernetes.io/name: drunk-app
      any: true

- it: should not created service port and type
  set:
    app:
      fullname: custom-service
      labels:
        app: custom-app
    deployment:
      enabled: true
  asserts:
  - hasDocuments:
      count: 0

- it: should create Service with default port if only 1 port us defined in the deployment
  set:
    app:
      fullname: default-port-service
    deployment:
      ports:
        http: 9090
    service:
      enabled: true
      type: ClusterIP
  asserts:
  - hasDocuments:
      count: 1
  - equal:
      path: spec.ports[0].port
      value: 80
  - equal:
      path: spec.ports[0].targetPort
      value: http

- it: should create Service with multiple custom ports
  set:
    app:
      fullname: multi-port-service
    deployment:
      ports:
        http: 8080
        https: 8443
        metrics: 9090
    service:
      enabled: true
      type: ClusterIP
  asserts:
  - hasDocuments:
      count: 1
  - equal:
      path: spec.ports[0].port
      value: 8080
  - equal:
      path: spec.ports[0].targetPort
      value: http
  - equal:
      path: spec.ports[1].port
      value: 8443
  - equal:
      path: spec.ports[1].targetPort
      value: https
  - equal:
      path: spec.ports[2].port
      value: 9090
  - equal:
      path: spec.ports[2].targetPort
      value: metrics
  - equal:
      path: spec.ports[0].protocol
      value: TCP
  - equal:
      path: spec.ports[1].protocol
      value: TCP
  - equal:
      path: spec.ports[2].protocol
      value: TCP
